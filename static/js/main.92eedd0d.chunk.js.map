{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classNames","completed","title","TodoList","todos","map","getUser","searchParameter","foundUserById","usersFromServer","find","foundUserByName","todosModified","userId","App","useState","isClicked","setIsClicked","titleName","setTitleName","userName","setUserName","setTodos","titleValueModified","titleValue","match","join","trim","action","method","onSubmit","event","preventDefault","htmlFor","type","placeholder","value","onChange","target","disabled","onClick","currentUser","todosIdCollection","todosIdMaxValue","Math","max","modifiedTitle","newTodo","current","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.92eedd0d.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a\n    className=\"UserInfo\"\n    href={`mailto:${user.email}`}\n  >\n    {user.name}\n  </a>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={classNames(\n      'TodoInfo',\n      {\n        'TodoInfo--completed': todo.completed,\n      },\n    )}\n  >\n    <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n    {todo.user && <UserInfo user={todo.user} />}\n  </article>\n);\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\nimport '../../App.scss';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section>\n    <ul className=\"TodoList\">\n      {todos.map(todo => (\n        <li key={todo.id}>\n          <TodoInfo todo={todo} />\n        </li>\n      ))}\n    </ul>\n\n  </section>\n);\n","import './App.scss';\nimport React, { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nfunction getUser(searchParameter: number | string): User | null {\n  const foundUserById = usersFromServer.find(\n    user => user.id === searchParameter,\n  );\n\n  const foundUserByName = usersFromServer.find(\n    user => user.name === searchParameter,\n  );\n\n  if (typeof searchParameter === 'string') {\n    return foundUserByName || null;\n  }\n\n  return foundUserById || null;\n}\n\nexport const todosModified: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [isClicked, setIsClicked] = useState(false);\n  const [titleName, setTitleName] = useState('');\n  const [userName, setUserName] = useState('');\n  const [todos, setTodos] = useState<Todo[]>(todosModified);\n\n  const titleValueModified = (titleValue: string) => {\n    const regexChars = /[\\wа-я\\s]/ig;\n\n    return titleValue?.match(regexChars)?.join('').trim();\n  };\n\n  const handleFormData = () => {\n    const currentUser = getUser(userName);\n    const id = currentUser?.id;\n    const todosIdCollection = todos.map(todo => todo.id);\n    const todosIdMaxValue = Math.max(...todosIdCollection);\n    const modifiedTitle = titleValueModified(titleName);\n    const newTodo: Todo | undefined = {\n      id: todosIdMaxValue + 1,\n      userId: id,\n      title: modifiedTitle,\n      completed: false,\n      user: currentUser,\n    };\n\n    setIsClicked(true);\n\n    if (userName && modifiedTitle) {\n      setTodos(current => [...current, newTodo]);\n      setTitleName('');\n      setUserName('');\n      setIsClicked(false);\n    }\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setUserName(value);\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setTitleName(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => {\n          event.preventDefault();\n        }}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"setTitleName\">\n            Title:&nbsp;\n            <input\n              id=\"setTitleName\"\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={titleName}\n              onChange={handleTitleChange}\n            />\n          </label>\n          {isClicked\n          && !titleValueModified(titleName)\n          && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"setUserName\">\n            User:&nbsp;\n            <select\n              id=\"setUserName\"\n              data-cy=\"userSelect\"\n              value={userName}\n              onChange={handleUserChange}\n            >\n              <option value=\"\" disabled>Choose a user</option>\n              {usersFromServer.map(user => (\n                <option\n                  key={user.id}\n                  value={user.name}\n                >\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {isClicked\n          && !userName\n          && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          onClick={handleFormData}\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}